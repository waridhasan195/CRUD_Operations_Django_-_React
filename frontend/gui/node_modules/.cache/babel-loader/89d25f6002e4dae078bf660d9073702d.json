{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkauthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatchEvent(authStart());\n  axios.post('http://127.0.0.1:8000/rest-auth/login/', {\n    username: username,\n    password: password\n  }).then(res => {\n    const token = res.data.token;\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem('token', token);\n    localStorage.setItem('expirationDate', expirationDate);\n    dispatch(authSuccess(token));\n    dispatch(checkauthTimeout(3600));\n  }).catch(error => {\n    dispatch(authFail(error));\n  });\n};\nexport const authSignin = (username, email, password1, password2) => {\n  return dispatchEvent(authStart());\n  axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n    username: username,\n    email: email,\n    password1: password1,\n    password2: password2\n  }).then(res => {\n    const token = res.data.token;\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem('token', token);\n    localStorage.setItem('expirationDate', expirationDate);\n    dispatch(authSuccess(token));\n    dispatch(checkauthTimeout(3600));\n  }).catch(error => {\n    dispatch(authFail(error));\n  });\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token == undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkauthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["E:/DJANGO_and_REACT/frontend/gui/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkauthTimeout","expirationTime","dispatch","setTimeout","authLogin","username","password","dispatchEvent","post","then","res","data","expirationDate","Date","getTime","setItem","catch","authSignin","email","password1","password2","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["\r\nimport axios from 'axios'\r\nimport * as actionTypes from './actionTypes'\r\n\r\nexport const authStart = () => {\r\n    return{\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = token => {\r\n    return{\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: token\r\n    }\r\n}\r\n\r\nexport const authFail = error => {\r\n    return{\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const logout =()=>{\r\n    localStorage.removeItem('user')\r\n    localStorage.removeItem('expirationDate')\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const checkauthTimeout = expirationTime =>{\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout())\r\n        }, expirationTime * 1000)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const authLogin = (username, password) => {\r\n    return dispatchEvent(authStart())\r\n    axios.post('http://127.0.0.1:8000/rest-auth/login/', {\r\n        username: username,\r\n        password: password\r\n    })\r\n    .then( res => {\r\n        const token = res.data.token\r\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000)\r\n        localStorage.setItem('token', token)\r\n        localStorage.setItem('expirationDate', expirationDate)\r\n        dispatch(authSuccess(token))\r\n        dispatch(checkauthTimeout(3600))\r\n    })\r\n    .catch(error => {\r\n        dispatch(authFail(error))\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const authSignin = (username, email, password1, password2) => {\r\n    return dispatchEvent(authStart())\r\n    axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\r\n        username: username,\r\n        email: email,\r\n        password1: password1,\r\n        password2: password2\r\n    })\r\n    .then( res => {\r\n        const token = res.data.token\r\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000)\r\n        localStorage.setItem('token', token)\r\n        localStorage.setItem('expirationDate', expirationDate)\r\n        dispatch(authSuccess(token))\r\n        dispatch(checkauthTimeout(3600))\r\n    })\r\n    .catch(error => {\r\n        dispatch(authFail(error))\r\n    })\r\n}\r\n\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        if (token == undefined){\r\n            dispatch(logout())\r\n        }\r\n        else{\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\r\n            if (expirationDate <= new Date()){\r\n                dispatch(logout())\r\n            }\r\n            else{\r\n                dispatch(authSuccess(token))\r\n                dispatch(checkauthTimeout((expirationDate.getTime() - new Date().getTime())/1000))\r\n            }\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}